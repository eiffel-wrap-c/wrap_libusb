note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class LIBUSB_INTERFACE_DESCRIPTOR_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	blength: INTEGER
			-- Access member `bLength`
		require
			exists: exists
		do
			Result := c_blength (item)
		ensure
			result_correct: Result = c_blength (item)
		end

	set_blength (a_value: INTEGER) 
			-- Change the value of member `bLength` to `a_value`.
		require
			exists: exists
		do
			set_c_blength (item, a_value)
		ensure
			blength_set: a_value = blength
		end

	bdescriptortype: INTEGER
			-- Access member `bDescriptorType`
		require
			exists: exists
		do
			Result := c_bdescriptortype (item)
		ensure
			result_correct: Result = c_bdescriptortype (item)
		end

	set_bdescriptortype (a_value: INTEGER) 
			-- Change the value of member `bDescriptorType` to `a_value`.
		require
			exists: exists
		do
			set_c_bdescriptortype (item, a_value)
		ensure
			bdescriptortype_set: a_value = bdescriptortype
		end

	binterfacenumber: INTEGER
			-- Access member `bInterfaceNumber`
		require
			exists: exists
		do
			Result := c_binterfacenumber (item)
		ensure
			result_correct: Result = c_binterfacenumber (item)
		end

	set_binterfacenumber (a_value: INTEGER) 
			-- Change the value of member `bInterfaceNumber` to `a_value`.
		require
			exists: exists
		do
			set_c_binterfacenumber (item, a_value)
		ensure
			binterfacenumber_set: a_value = binterfacenumber
		end

	balternatesetting: INTEGER
			-- Access member `bAlternateSetting`
		require
			exists: exists
		do
			Result := c_balternatesetting (item)
		ensure
			result_correct: Result = c_balternatesetting (item)
		end

	set_balternatesetting (a_value: INTEGER) 
			-- Change the value of member `bAlternateSetting` to `a_value`.
		require
			exists: exists
		do
			set_c_balternatesetting (item, a_value)
		ensure
			balternatesetting_set: a_value = balternatesetting
		end

	bnumendpoints: INTEGER
			-- Access member `bNumEndpoints`
		require
			exists: exists
		do
			Result := c_bnumendpoints (item)
		ensure
			result_correct: Result = c_bnumendpoints (item)
		end

	set_bnumendpoints (a_value: INTEGER) 
			-- Change the value of member `bNumEndpoints` to `a_value`.
		require
			exists: exists
		do
			set_c_bnumendpoints (item, a_value)
		ensure
			bnumendpoints_set: a_value = bnumendpoints
		end

	binterfaceclass: INTEGER
			-- Access member `bInterfaceClass`
		require
			exists: exists
		do
			Result := c_binterfaceclass (item)
		ensure
			result_correct: Result = c_binterfaceclass (item)
		end

	set_binterfaceclass (a_value: INTEGER) 
			-- Change the value of member `bInterfaceClass` to `a_value`.
		require
			exists: exists
		do
			set_c_binterfaceclass (item, a_value)
		ensure
			binterfaceclass_set: a_value = binterfaceclass
		end

	binterfacesubclass: INTEGER
			-- Access member `bInterfaceSubClass`
		require
			exists: exists
		do
			Result := c_binterfacesubclass (item)
		ensure
			result_correct: Result = c_binterfacesubclass (item)
		end

	set_binterfacesubclass (a_value: INTEGER) 
			-- Change the value of member `bInterfaceSubClass` to `a_value`.
		require
			exists: exists
		do
			set_c_binterfacesubclass (item, a_value)
		ensure
			binterfacesubclass_set: a_value = binterfacesubclass
		end

	binterfaceprotocol: INTEGER
			-- Access member `bInterfaceProtocol`
		require
			exists: exists
		do
			Result := c_binterfaceprotocol (item)
		ensure
			result_correct: Result = c_binterfaceprotocol (item)
		end

	set_binterfaceprotocol (a_value: INTEGER) 
			-- Change the value of member `bInterfaceProtocol` to `a_value`.
		require
			exists: exists
		do
			set_c_binterfaceprotocol (item, a_value)
		ensure
			binterfaceprotocol_set: a_value = binterfaceprotocol
		end

	iinterface: INTEGER
			-- Access member `iInterface`
		require
			exists: exists
		do
			Result := c_iinterface (item)
		ensure
			result_correct: Result = c_iinterface (item)
		end

	set_iinterface (a_value: INTEGER) 
			-- Change the value of member `iInterface` to `a_value`.
		require
			exists: exists
		do
			set_c_iinterface (item, a_value)
		ensure
			iinterface_set: a_value = iinterface
		end

	endpoint: detachable LIBUSB_ENDPOINT_DESCRIPTOR_STRUCT_API 
			-- Access member `endpoint`
		require
			exists: exists
		do
			if attached c_endpoint (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_endpoint (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_endpoint (item) 
		end

	set_endpoint (a_value: LIBUSB_ENDPOINT_DESCRIPTOR_STRUCT_API) 
			-- Set member `endpoint`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_endpoint (item, a_value.item)
		ensure
			endpoint_set: attached endpoint as l_value implies l_value.item = a_value.item
		end

	extra:  detachable STRING
			-- Access member `extra`
		require
			exists: exists
		do
			if attached c_extra (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_extra (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_extra (a_value: STRING) 
			-- Change the value of member `extra` to `a_value`.
		require
			exists: exists
		do
			set_c_extra (item, (create {C_STRING}.make (a_value)).item )
		end

	extra_length: INTEGER
			-- Access member `extra_length`
		require
			exists: exists
		do
			Result := c_extra_length (item)
		ensure
			result_correct: Result = c_extra_length (item)
		end

	set_extra_length (a_value: INTEGER) 
			-- Change the value of member `extra_length` to `a_value`.
		require
			exists: exists
		do
			set_c_extra_length (item, a_value)
		ensure
			extra_length_set: a_value = extra_length
		end

feature {NONE} -- Implementation wrapper for struct struct libusb_interface_descriptor

	sizeof_external: INTEGER 
		external
			"C inline use <libusb.h>"
		alias
			"sizeof(struct libusb_interface_descriptor)"
		end

	c_blength (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bLength
			]"
		end

	set_c_blength (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bLength =  (uint8_t)$a_value
			]"
		ensure
			blength_set: a_value = c_blength (an_item)
		end

	c_bdescriptortype (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bDescriptorType
			]"
		end

	set_c_bdescriptortype (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bDescriptorType =  (uint8_t)$a_value
			]"
		ensure
			bdescriptortype_set: a_value = c_bdescriptortype (an_item)
		end

	c_binterfacenumber (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bInterfaceNumber
			]"
		end

	set_c_binterfacenumber (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bInterfaceNumber =  (uint8_t)$a_value
			]"
		ensure
			binterfacenumber_set: a_value = c_binterfacenumber (an_item)
		end

	c_balternatesetting (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bAlternateSetting
			]"
		end

	set_c_balternatesetting (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bAlternateSetting =  (uint8_t)$a_value
			]"
		ensure
			balternatesetting_set: a_value = c_balternatesetting (an_item)
		end

	c_bnumendpoints (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bNumEndpoints
			]"
		end

	set_c_bnumendpoints (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bNumEndpoints =  (uint8_t)$a_value
			]"
		ensure
			bnumendpoints_set: a_value = c_bnumendpoints (an_item)
		end

	c_binterfaceclass (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bInterfaceClass
			]"
		end

	set_c_binterfaceclass (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bInterfaceClass =  (uint8_t)$a_value
			]"
		ensure
			binterfaceclass_set: a_value = c_binterfaceclass (an_item)
		end

	c_binterfacesubclass (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bInterfaceSubClass
			]"
		end

	set_c_binterfacesubclass (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bInterfaceSubClass =  (uint8_t)$a_value
			]"
		ensure
			binterfacesubclass_set: a_value = c_binterfacesubclass (an_item)
		end

	c_binterfaceprotocol (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bInterfaceProtocol
			]"
		end

	set_c_binterfaceprotocol (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->bInterfaceProtocol =  (uint8_t)$a_value
			]"
		ensure
			binterfaceprotocol_set: a_value = c_binterfaceprotocol (an_item)
		end

	c_iinterface (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->iInterface
			]"
		end

	set_c_iinterface (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->iInterface =  (uint8_t)$a_value
			]"
		ensure
			iinterface_set: a_value = c_iinterface (an_item)
		end

	c_endpoint (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->endpoint
			]"
		end

	set_c_endpoint (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->endpoint =  (struct libusb_endpoint_descriptor const*)$a_value
			]"
		ensure
			endpoint_set: a_value = c_endpoint (an_item)
		end

	c_extra (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->extra
			]"
		end

	set_c_extra (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->extra =  (unsigned char const*)$a_value
			]"
		ensure
			extra_set: a_value = c_extra (an_item)
		end

	c_extra_length (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->extra_length
			]"
		end

	set_c_extra_length (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_interface_descriptor*)$an_item)->extra_length =  (int)$a_value
			]"
		ensure
			extra_length_set: a_value = c_extra_length (an_item)
		end

end
