note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class LIBUSB_BOS_DESCRIPTOR_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	blength: INTEGER
			-- Access member `bLength`
		require
			exists: exists
		do
			Result := c_blength (item)
		ensure
			result_correct: Result = c_blength (item)
		end

	set_blength (a_value: INTEGER) 
			-- Change the value of member `bLength` to `a_value`.
		require
			exists: exists
		do
			set_c_blength (item, a_value)
		ensure
			blength_set: a_value = blength
		end

	bdescriptortype: INTEGER
			-- Access member `bDescriptorType`
		require
			exists: exists
		do
			Result := c_bdescriptortype (item)
		ensure
			result_correct: Result = c_bdescriptortype (item)
		end

	set_bdescriptortype (a_value: INTEGER) 
			-- Change the value of member `bDescriptorType` to `a_value`.
		require
			exists: exists
		do
			set_c_bdescriptortype (item, a_value)
		ensure
			bdescriptortype_set: a_value = bdescriptortype
		end

	wtotallength: INTEGER
			-- Access member `wTotalLength`
		require
			exists: exists
		do
			Result := c_wtotallength (item)
		ensure
			result_correct: Result = c_wtotallength (item)
		end

	set_wtotallength (a_value: INTEGER) 
			-- Change the value of member `wTotalLength` to `a_value`.
		require
			exists: exists
		do
			set_c_wtotallength (item, a_value)
		ensure
			wtotallength_set: a_value = wtotallength
		end

	bnumdevicecaps: INTEGER
			-- Access member `bNumDeviceCaps`
		require
			exists: exists
		do
			Result := c_bnumdevicecaps (item)
		ensure
			result_correct: Result = c_bnumdevicecaps (item)
		end

	set_bnumdevicecaps (a_value: INTEGER) 
			-- Change the value of member `bNumDeviceCaps` to `a_value`.
		require
			exists: exists
		do
			set_c_bnumdevicecaps (item, a_value)
		ensure
			bnumdevicecaps_set: a_value = bnumdevicecaps
		end

	dev_capability: detachable LIBUSB_BOS_DEV_CAPABILITY_DESCRIPTOR_STRUCT_API 
			-- Access member `dev_capability`
		require
			exists: exists
		do
			if attached c_dev_capability (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_dev_capability (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_dev_capability (item) 
		end

feature {NONE} -- Implementation wrapper for struct struct libusb_bos_descriptor

	sizeof_external: INTEGER 
		external
			"C inline use <libusb.h>"
		alias
			"sizeof(struct libusb_bos_descriptor)"
		end

	c_blength (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_bos_descriptor*)$an_item)->bLength
			]"
		end

	set_c_blength (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_bos_descriptor*)$an_item)->bLength =  (uint8_t)$a_value
			]"
		ensure
			blength_set: a_value = c_blength (an_item)
		end

	c_bdescriptortype (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_bos_descriptor*)$an_item)->bDescriptorType
			]"
		end

	set_c_bdescriptortype (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_bos_descriptor*)$an_item)->bDescriptorType =  (uint8_t)$a_value
			]"
		ensure
			bdescriptortype_set: a_value = c_bdescriptortype (an_item)
		end

	c_wtotallength (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_bos_descriptor*)$an_item)->wTotalLength
			]"
		end

	set_c_wtotallength (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_bos_descriptor*)$an_item)->wTotalLength =  (uint16_t)$a_value
			]"
		ensure
			wtotallength_set: a_value = c_wtotallength (an_item)
		end

	c_bnumdevicecaps (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_bos_descriptor*)$an_item)->bNumDeviceCaps
			]"
		end

	set_c_bnumdevicecaps (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_bos_descriptor*)$an_item)->bNumDeviceCaps =  (uint8_t)$a_value
			]"
		ensure
			bnumdevicecaps_set: a_value = c_bnumdevicecaps (an_item)
		end

	c_dev_capability (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_bos_descriptor*)$an_item)->dev_capability
			]"
		end

end
