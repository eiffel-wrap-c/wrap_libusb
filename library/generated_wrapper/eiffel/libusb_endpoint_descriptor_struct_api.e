note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class LIBUSB_ENDPOINT_DESCRIPTOR_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	blength: INTEGER
			-- Access member `bLength`
		require
			exists: exists
		do
			Result := c_blength (item)
		ensure
			result_correct: Result = c_blength (item)
		end

	set_blength (a_value: INTEGER) 
			-- Change the value of member `bLength` to `a_value`.
		require
			exists: exists
		do
			set_c_blength (item, a_value)
		ensure
			blength_set: a_value = blength
		end

	bdescriptortype: INTEGER
			-- Access member `bDescriptorType`
		require
			exists: exists
		do
			Result := c_bdescriptortype (item)
		ensure
			result_correct: Result = c_bdescriptortype (item)
		end

	set_bdescriptortype (a_value: INTEGER) 
			-- Change the value of member `bDescriptorType` to `a_value`.
		require
			exists: exists
		do
			set_c_bdescriptortype (item, a_value)
		ensure
			bdescriptortype_set: a_value = bdescriptortype
		end

	bendpointaddress: INTEGER
			-- Access member `bEndpointAddress`
		require
			exists: exists
		do
			Result := c_bendpointaddress (item)
		ensure
			result_correct: Result = c_bendpointaddress (item)
		end

	set_bendpointaddress (a_value: INTEGER) 
			-- Change the value of member `bEndpointAddress` to `a_value`.
		require
			exists: exists
		do
			set_c_bendpointaddress (item, a_value)
		ensure
			bendpointaddress_set: a_value = bendpointaddress
		end

	bmattributes: INTEGER
			-- Access member `bmAttributes`
		require
			exists: exists
		do
			Result := c_bmattributes (item)
		ensure
			result_correct: Result = c_bmattributes (item)
		end

	set_bmattributes (a_value: INTEGER) 
			-- Change the value of member `bmAttributes` to `a_value`.
		require
			exists: exists
		do
			set_c_bmattributes (item, a_value)
		ensure
			bmattributes_set: a_value = bmattributes
		end

	wmaxpacketsize: INTEGER
			-- Access member `wMaxPacketSize`
		require
			exists: exists
		do
			Result := c_wmaxpacketsize (item)
		ensure
			result_correct: Result = c_wmaxpacketsize (item)
		end

	set_wmaxpacketsize (a_value: INTEGER) 
			-- Change the value of member `wMaxPacketSize` to `a_value`.
		require
			exists: exists
		do
			set_c_wmaxpacketsize (item, a_value)
		ensure
			wmaxpacketsize_set: a_value = wmaxpacketsize
		end

	binterval: INTEGER
			-- Access member `bInterval`
		require
			exists: exists
		do
			Result := c_binterval (item)
		ensure
			result_correct: Result = c_binterval (item)
		end

	set_binterval (a_value: INTEGER) 
			-- Change the value of member `bInterval` to `a_value`.
		require
			exists: exists
		do
			set_c_binterval (item, a_value)
		ensure
			binterval_set: a_value = binterval
		end

	brefresh: INTEGER
			-- Access member `bRefresh`
		require
			exists: exists
		do
			Result := c_brefresh (item)
		ensure
			result_correct: Result = c_brefresh (item)
		end

	set_brefresh (a_value: INTEGER) 
			-- Change the value of member `bRefresh` to `a_value`.
		require
			exists: exists
		do
			set_c_brefresh (item, a_value)
		ensure
			brefresh_set: a_value = brefresh
		end

	bsynchaddress: INTEGER
			-- Access member `bSynchAddress`
		require
			exists: exists
		do
			Result := c_bsynchaddress (item)
		ensure
			result_correct: Result = c_bsynchaddress (item)
		end

	set_bsynchaddress (a_value: INTEGER) 
			-- Change the value of member `bSynchAddress` to `a_value`.
		require
			exists: exists
		do
			set_c_bsynchaddress (item, a_value)
		ensure
			bsynchaddress_set: a_value = bsynchaddress
		end

	extra:  detachable STRING
			-- Access member `extra`
		require
			exists: exists
		do
			if attached c_extra (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_extra (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_extra (a_value: STRING) 
			-- Change the value of member `extra` to `a_value`.
		require
			exists: exists
		do
			set_c_extra (item, (create {C_STRING}.make (a_value)).item )
		end

	extra_length: INTEGER
			-- Access member `extra_length`
		require
			exists: exists
		do
			Result := c_extra_length (item)
		ensure
			result_correct: Result = c_extra_length (item)
		end

	set_extra_length (a_value: INTEGER) 
			-- Change the value of member `extra_length` to `a_value`.
		require
			exists: exists
		do
			set_c_extra_length (item, a_value)
		ensure
			extra_length_set: a_value = extra_length
		end

feature {NONE} -- Implementation wrapper for struct struct libusb_endpoint_descriptor

	sizeof_external: INTEGER 
		external
			"C inline use <libusb.h>"
		alias
			"sizeof(struct libusb_endpoint_descriptor)"
		end

	c_blength (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->bLength
			]"
		end

	set_c_blength (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->bLength =  (uint8_t)$a_value
			]"
		ensure
			blength_set: a_value = c_blength (an_item)
		end

	c_bdescriptortype (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->bDescriptorType
			]"
		end

	set_c_bdescriptortype (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->bDescriptorType =  (uint8_t)$a_value
			]"
		ensure
			bdescriptortype_set: a_value = c_bdescriptortype (an_item)
		end

	c_bendpointaddress (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->bEndpointAddress
			]"
		end

	set_c_bendpointaddress (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->bEndpointAddress =  (uint8_t)$a_value
			]"
		ensure
			bendpointaddress_set: a_value = c_bendpointaddress (an_item)
		end

	c_bmattributes (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->bmAttributes
			]"
		end

	set_c_bmattributes (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->bmAttributes =  (uint8_t)$a_value
			]"
		ensure
			bmattributes_set: a_value = c_bmattributes (an_item)
		end

	c_wmaxpacketsize (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->wMaxPacketSize
			]"
		end

	set_c_wmaxpacketsize (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->wMaxPacketSize =  (uint16_t)$a_value
			]"
		ensure
			wmaxpacketsize_set: a_value = c_wmaxpacketsize (an_item)
		end

	c_binterval (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->bInterval
			]"
		end

	set_c_binterval (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->bInterval =  (uint8_t)$a_value
			]"
		ensure
			binterval_set: a_value = c_binterval (an_item)
		end

	c_brefresh (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->bRefresh
			]"
		end

	set_c_brefresh (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->bRefresh =  (uint8_t)$a_value
			]"
		ensure
			brefresh_set: a_value = c_brefresh (an_item)
		end

	c_bsynchaddress (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->bSynchAddress
			]"
		end

	set_c_bsynchaddress (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->bSynchAddress =  (uint8_t)$a_value
			]"
		ensure
			bsynchaddress_set: a_value = c_bsynchaddress (an_item)
		end

	c_extra (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->extra
			]"
		end

	set_c_extra (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->extra =  (unsigned char const*)$a_value
			]"
		ensure
			extra_set: a_value = c_extra (an_item)
		end

	c_extra_length (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->extra_length
			]"
		end

	set_c_extra_length (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_endpoint_descriptor*)$an_item)->extra_length =  (int)$a_value
			]"
		ensure
			extra_length_set: a_value = c_extra_length (an_item)
		end

end
