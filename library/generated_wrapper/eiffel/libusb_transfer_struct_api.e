note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class LIBUSB_TRANSFER_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	dev_handle: detachable LIBUSB_DEVICE_HANDLE_STRUCT_API 
			-- Access member `dev_handle`
		require
			exists: exists
		do
			if attached c_dev_handle (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_dev_handle (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_dev_handle (item) 
		end

	set_dev_handle (a_value: LIBUSB_DEVICE_HANDLE_STRUCT_API) 
			-- Set member `dev_handle`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_dev_handle (item, a_value.item)
		ensure
			dev_handle_set: attached dev_handle as l_value implies l_value.item = a_value.item
		end

	flags: INTEGER
			-- Access member `flags`
		require
			exists: exists
		do
			Result := c_flags (item)
		ensure
			result_correct: Result = c_flags (item)
		end

	set_flags (a_value: INTEGER) 
			-- Change the value of member `flags` to `a_value`.
		require
			exists: exists
		do
			set_c_flags (item, a_value)
		ensure
			flags_set: a_value = flags
		end

	endpoint: INTEGER
			-- Access member `endpoint`
		require
			exists: exists
		do
			Result := c_endpoint (item)
		ensure
			result_correct: Result = c_endpoint (item)
		end

	set_endpoint (a_value: INTEGER) 
			-- Change the value of member `endpoint` to `a_value`.
		require
			exists: exists
		do
			set_c_endpoint (item, a_value)
		ensure
			endpoint_set: a_value = endpoint
		end

	type: INTEGER
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item)
		ensure
			result_correct: Result = c_type (item)
		end

	set_type (a_value: INTEGER) 
			-- Change the value of member `type` to `a_value`.
		require
			exists: exists
		do
			set_c_type (item, a_value)
		ensure
			type_set: a_value = type
		end

	timeout: INTEGER
			-- Access member `timeout`
		require
			exists: exists
		do
			Result := c_timeout (item)
		ensure
			result_correct: Result = c_timeout (item)
		end

	set_timeout (a_value: INTEGER) 
			-- Change the value of member `timeout` to `a_value`.
		require
			exists: exists
		do
			set_c_timeout (item, a_value)
		ensure
			timeout_set: a_value = timeout
		end

	status: INTEGER
			-- Access member `status`
		require
			exists: exists
		do
			Result := c_status (item)
		ensure
			result_correct: Result = c_status (item)
		end

	set_status (a_value: INTEGER) 
			-- Change the value of member `status` to `a_value`.
		require
			exists: exists
		do
			set_c_status (item, a_value)
		ensure
			status_set: a_value = status
		end

	length: INTEGER
			-- Access member `length`
		require
			exists: exists
		do
			Result := c_length (item)
		ensure
			result_correct: Result = c_length (item)
		end

	set_length (a_value: INTEGER) 
			-- Change the value of member `length` to `a_value`.
		require
			exists: exists
		do
			set_c_length (item, a_value)
		ensure
			length_set: a_value = length
		end

	actual_length: INTEGER
			-- Access member `actual_length`
		require
			exists: exists
		do
			Result := c_actual_length (item)
		ensure
			result_correct: Result = c_actual_length (item)
		end

	set_actual_length (a_value: INTEGER) 
			-- Change the value of member `actual_length` to `a_value`.
		require
			exists: exists
		do
			set_c_actual_length (item, a_value)
		ensure
			actual_length_set: a_value = actual_length
		end

	callback: POINTER
			-- Access member `callback`
		require
			exists: exists
		do
			Result := c_callback (item)
		ensure
			result_correct: Result = c_callback (item)
		end

	set_callback (a_value: POINTER) 
			-- Change the value of member `callback` to `a_value`.
		require
			exists: exists
		do
			set_c_callback (item, a_value)
		ensure
			callback_set: a_value = callback
		end

	user_data: POINTER
			-- Access member `user_data`
		require
			exists: exists
		do
			Result := c_user_data (item)
		ensure
			result_correct: Result = c_user_data (item)
		end

	set_user_data (a_value: POINTER) 
			-- Change the value of member `user_data` to `a_value`.
		require
			exists: exists
		do
			set_c_user_data (item, a_value)
		ensure
			user_data_set: a_value = user_data
		end

	buffer:  detachable C_STRING
			-- Access member `buffer`
		require
			exists: exists
		do
			if attached c_buffer (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_buffer (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_buffer (a_value: C_STRING) 
			-- Change the value of member `buffer` to `a_value`.
		require
			exists: exists
		do
			set_c_buffer (item, a_value.item )
		end

	num_iso_packets: INTEGER
			-- Access member `num_iso_packets`
		require
			exists: exists
		do
			Result := c_num_iso_packets (item)
		ensure
			result_correct: Result = c_num_iso_packets (item)
		end

	set_num_iso_packets (a_value: INTEGER) 
			-- Change the value of member `num_iso_packets` to `a_value`.
		require
			exists: exists
		do
			set_c_num_iso_packets (item, a_value)
		ensure
			num_iso_packets_set: a_value = num_iso_packets
		end

	iso_packet_desc: LIBUSB_ISO_PACKET_DESCRIPTOR_STRUCT_API
			-- Access member `iso_packet_desc`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_iso_packet_desc(item) )
		ensure
			result_not_void: Result.item = c_iso_packet_desc (item) 
		end

feature {NONE} -- Implementation wrapper for struct struct libusb_transfer

	sizeof_external: INTEGER 
		external
			"C inline use <libusb.h>"
		alias
			"sizeof(struct libusb_transfer)"
		end

	c_dev_handle (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->dev_handle
			]"
		end

	set_c_dev_handle (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->dev_handle =  (libusb_device_handle*)$a_value
			]"
		ensure
			dev_handle_set: a_value = c_dev_handle (an_item)
		end

	c_flags (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->flags
			]"
		end

	set_c_flags (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->flags =  (uint8_t)$a_value
			]"
		ensure
			flags_set: a_value = c_flags (an_item)
		end

	c_endpoint (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->endpoint
			]"
		end

	set_c_endpoint (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->endpoint =  (unsigned char)$a_value
			]"
		ensure
			endpoint_set: a_value = c_endpoint (an_item)
		end

	c_type (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->type
			]"
		end

	set_c_type (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->type =  (unsigned char)$a_value
			]"
		ensure
			type_set: a_value = c_type (an_item)
		end

	c_timeout (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->timeout
			]"
		end

	set_c_timeout (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->timeout =  (unsigned int)$a_value
			]"
		ensure
			timeout_set: a_value = c_timeout (an_item)
		end

	c_status (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->status
			]"
		end

	set_c_status (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->status =  (enum libusb_transfer_status)$a_value
			]"
		ensure
			status_set: a_value = c_status (an_item)
		end

	c_length (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->length
			]"
		end

	set_c_length (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->length =  (int)$a_value
			]"
		ensure
			length_set: a_value = c_length (an_item)
		end

	c_actual_length (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->actual_length
			]"
		end

	set_c_actual_length (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->actual_length =  (int)$a_value
			]"
		ensure
			actual_length_set: a_value = c_actual_length (an_item)
		end

	c_callback (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->callback
			]"
		end

	set_c_callback (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->callback =  (libusb_transfer_cb_fn)$a_value
			]"
		ensure
			callback_set: a_value = c_callback (an_item)
		end

	c_user_data (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->user_data
			]"
		end

	set_c_user_data (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->user_data =  (void*)$a_value
			]"
		ensure
			user_data_set: a_value = c_user_data (an_item)
		end

	c_buffer (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->buffer
			]"
		end

	set_c_buffer (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->buffer =  (unsigned char*)$a_value
			]"
		ensure
			buffer_set: a_value = c_buffer (an_item)
		end

	c_num_iso_packets (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->num_iso_packets
			]"
		end

	set_c_num_iso_packets (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->num_iso_packets =  (int)$a_value
			]"
		ensure
			num_iso_packets_set: a_value = c_num_iso_packets (an_item)
		end

	c_iso_packet_desc (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_transfer*)$an_item)->iso_packet_desc
			]"
		end

end
