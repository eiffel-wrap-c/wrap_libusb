note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class LIBUSB_SS_ENDPOINT_COMPANION_DESCRIPTOR_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	blength: INTEGER
			-- Access member `bLength`
		require
			exists: exists
		do
			Result := c_blength (item)
		ensure
			result_correct: Result = c_blength (item)
		end

	set_blength (a_value: INTEGER) 
			-- Change the value of member `bLength` to `a_value`.
		require
			exists: exists
		do
			set_c_blength (item, a_value)
		ensure
			blength_set: a_value = blength
		end

	bdescriptortype: INTEGER
			-- Access member `bDescriptorType`
		require
			exists: exists
		do
			Result := c_bdescriptortype (item)
		ensure
			result_correct: Result = c_bdescriptortype (item)
		end

	set_bdescriptortype (a_value: INTEGER) 
			-- Change the value of member `bDescriptorType` to `a_value`.
		require
			exists: exists
		do
			set_c_bdescriptortype (item, a_value)
		ensure
			bdescriptortype_set: a_value = bdescriptortype
		end

	bmaxburst: INTEGER
			-- Access member `bMaxBurst`
		require
			exists: exists
		do
			Result := c_bmaxburst (item)
		ensure
			result_correct: Result = c_bmaxburst (item)
		end

	set_bmaxburst (a_value: INTEGER) 
			-- Change the value of member `bMaxBurst` to `a_value`.
		require
			exists: exists
		do
			set_c_bmaxburst (item, a_value)
		ensure
			bmaxburst_set: a_value = bmaxburst
		end

	bmattributes: INTEGER
			-- Access member `bmAttributes`
		require
			exists: exists
		do
			Result := c_bmattributes (item)
		ensure
			result_correct: Result = c_bmattributes (item)
		end

	set_bmattributes (a_value: INTEGER) 
			-- Change the value of member `bmAttributes` to `a_value`.
		require
			exists: exists
		do
			set_c_bmattributes (item, a_value)
		ensure
			bmattributes_set: a_value = bmattributes
		end

	wbytesperinterval: INTEGER
			-- Access member `wBytesPerInterval`
		require
			exists: exists
		do
			Result := c_wbytesperinterval (item)
		ensure
			result_correct: Result = c_wbytesperinterval (item)
		end

	set_wbytesperinterval (a_value: INTEGER) 
			-- Change the value of member `wBytesPerInterval` to `a_value`.
		require
			exists: exists
		do
			set_c_wbytesperinterval (item, a_value)
		ensure
			wbytesperinterval_set: a_value = wbytesperinterval
		end

feature {NONE} -- Implementation wrapper for struct struct libusb_ss_endpoint_companion_descriptor

	sizeof_external: INTEGER 
		external
			"C inline use <libusb.h>"
		alias
			"sizeof(struct libusb_ss_endpoint_companion_descriptor)"
		end

	c_blength (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_ss_endpoint_companion_descriptor*)$an_item)->bLength
			]"
		end

	set_c_blength (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_ss_endpoint_companion_descriptor*)$an_item)->bLength =  (uint8_t)$a_value
			]"
		ensure
			blength_set: a_value = c_blength (an_item)
		end

	c_bdescriptortype (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_ss_endpoint_companion_descriptor*)$an_item)->bDescriptorType
			]"
		end

	set_c_bdescriptortype (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_ss_endpoint_companion_descriptor*)$an_item)->bDescriptorType =  (uint8_t)$a_value
			]"
		ensure
			bdescriptortype_set: a_value = c_bdescriptortype (an_item)
		end

	c_bmaxburst (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_ss_endpoint_companion_descriptor*)$an_item)->bMaxBurst
			]"
		end

	set_c_bmaxburst (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_ss_endpoint_companion_descriptor*)$an_item)->bMaxBurst =  (uint8_t)$a_value
			]"
		ensure
			bmaxburst_set: a_value = c_bmaxburst (an_item)
		end

	c_bmattributes (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_ss_endpoint_companion_descriptor*)$an_item)->bmAttributes
			]"
		end

	set_c_bmattributes (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_ss_endpoint_companion_descriptor*)$an_item)->bmAttributes =  (uint8_t)$a_value
			]"
		ensure
			bmattributes_set: a_value = c_bmattributes (an_item)
		end

	c_wbytesperinterval (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_ss_endpoint_companion_descriptor*)$an_item)->wBytesPerInterval
			]"
		end

	set_c_wbytesperinterval (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <libusb.h>"
		alias
			"[
				((struct libusb_ss_endpoint_companion_descriptor*)$an_item)->wBytesPerInterval =  (uint16_t)$a_value
			]"
		ensure
			wbytesperinterval_set: a_value = c_wbytesperinterval (an_item)
		end

end
